import numpy as np
import astropy.coordinates as coord
import astropy.units as un
import astropy.constants as const
import matplotlib.pyplot as plt
from galpy.orbit import Orbit
from galpy.potential import MWPotential2014
from galpy.util import bovy_conversion
from galpy.actionAngle import estimateDeltaStaeckel
from galpy.actionAngle import actionAngleStaeckel
from time import time
from astropy.table import Table, join

data_dir = '/shared/ebla/cotar/'
print 'Reading data'
gaia_data = Table.read(data_dir + 'Gaia_DR2_RV/GaiaSource_combined_RV_Bdist.fits')

# clusters = Table.read(data_dir+'Open_cluster_members_DR2.fits')
# selected_objects = clusters[clusters['cluster'] == 'ASCC_105']['source_id']

selected_objects = [
    216658186434533760, 125023306827390592, 166382158264255872, 70132658415356672, 70914174963212672, 52749349517121920,
    60737232772960896, 149730638774998016, 66944422591073024, 217631254223555712, 163891901865601408,
    162352035828539648, 70664482743682816, 120509738579844352, 112256980396927360, 119746677510509568,
    122037101965751424, 216559844566673920, 63958801843006208, 47709390077176320, 149524823941591040, 64148738180119680,
    65090680344356992, 49369622571743488, 218155927431116544, 217842566616251520, 163837819637463808, 51619120284286976,
    65496331417178368, 216532704668980352, 165532957328306304, 46217666333148416, 167878353069752320,
    117215807902051200, 124501446824625920, 71452282823829632, 216714536405355648, 64934893291213952, 68897842434107392,
    69922243674432896, 120088561203406336, 55950680700888320, 66739982146803456, 65208396808627840, 120720642949828992,
    69896473870624640, 124249418143641216, 118093252539728512, 69834763780636672, 115474112763499136, 70313016978627584,
    122079360147526656, 71498153074761216, 122283186411513472, 168830255261584128, 69822875311156224, 68660244843997312,
    121984909523078016, 63779134772193920, 68296886313838848, 53896449384342144, 65277975278721152, 117944577952339456,
    149014955486742656, 110791434477271424, 124372773900679680, 69945814454871680, 118010205052095104,
    62851250037017728, 71377000637253504, 118289931977488512, 66507469798632320, 123964408410206464, 216273872760907008,
    65226401311534208, 69575313395795584, 64888129687348736, 72023341675567360, 65131121756446592, 65273023179436288,
    218073773297988736, 66720946851771904, 217367435857769728, 65214856439472640, 64981137202021376, 70049477786093056,
    62909180556014080, 120045680249866752, 66734720809017856, 71304810826584704, 69935162935991168, 111248998815256832,
    217868164622076928, 68334235349446528, 65161976802151680, 68610006610414976, 65248460263511552, 68310359628169088,
    61519672735818880, 118078791386289920, 70158977974956672, 56451130290853888, 70121805035254144, 70108473456817280,
    45022222315428608, 69250235911393408, 71296667568555904, 66481837433947392, 64066107307543296, 69834759483788928,
    66863058730966528, 66811450402457216, 163647015711395584, 66781832308018176, 70286319462019328, 69643757994608512,
    162576812940018048, 121349735398454016, 117709729140216320, 66774513683782912, 69585140280997760, 65222759179189248,
    66640712564777856, 64597927335800064, 65190220507070208, 69811639676769536, 65295425728422528, 169153305523076352,
    68409487473090688, 59661291925385600, 69814388455816960, 110365854756118272, 65027595864800000, 66799768088857856,
    65225611037551360, 217890189214310144, 217361358479886720, 70506874624338176, 69811948914407168, 70242785673539712,
    63951826816014336, 117770825051232640, 64980278208557696, 70190245337962368, 110365098841874944, 71371262561007232,
    69649736589001600, 70426507196531456, 66937859881182848, 67281869581448704, 66957994687842176, 65113559634339200,
    66489259137570816, 70462688000922880, 65781345446197504, 65233788655261568, 66960262430594816, 65732447241199744,
    70252681278085376, 68444878003584384, 66462939577861248, 70234882933734400, 69370941672125184, 70125000491024128,
    66658996243552000, 68398732874994944, 64979732749686016, 65119164567417856, 68129764842889600, 65125864716379264,
    65819965792011904, 65247704349267584, 111721552594418304, 65281166437426176, 66517468482370304, 68150861722174848,
    64956123313498368, 69485978075890176, 56944909793468928, 66837495084120320, 66539252556578816, 64981931772948480,
    66565365957676416, 66499154741977216, 67680854859714816, 65588484235454592, 63849572235829248, 65214409762926720,
    64921458633614976, 64739248940235392, 66502281478384000, 66832100605159424, 69829609819915648, 65020414679879296,
    66838452861270272, 69857235049588736, 65207709613871744, 68250264445159936, 168007854922939776, 68254245878512384,
    65289279632597760, 66980362877378432, 65150947325369600, 65010239900405504, 68317609532996480, 62546101200350080,
    69840879814047872, 64575730944903552, 64808204638390912, 64770241424108032, 65680499614460800, 66537981246228096,
    65244749411766528, 63547378335443200, 122071118106673792, 65289623229979136, 66809491897360896, 65052953351603456,
    67618285777617664, 63780401784570496, 70369676189384832, 66471220274934272, 64923279699744256, 66997817623367296,
    66730120901930240, 68390417818463872, 65120470237460480, 66452769091505024, 66480944080770176, 64999588381514496,
    62088910522454272, 65072435323295872, 70169251536714624, 64095656682494720, 66519530066802944, 64941211186036352,
    64971177174850304, 66523893753437824, 149194661216820224, 65275089060719104, 68097020012324352, 66503449709270400,
    69819027020489088, 66481734354737792, 68322145018429952, 66570554277316992, 51659389897901568, 65089336018173440,
    65677372878285312, 66737095928811648, 65223618172733952, 64985127228608128, 69847610026687104, 65330099002345216,
    66878932929927936, 66788291938818304, 64671903852618624, 65004712279475712, 66787119410915072, 65119748682966912,
    65194584193758336, 69906571336964608, 65164171528305792, 64952829074688896, 67512560863864832, 218507702433343360,
    69876506565909632, 61554650949438208, 67331381964358656, 65864427293364864, 64879402312818944, 69883417170175488,
    65188090203295744, 67855471051393024, 64276315888567424, 63592767549850112, 66808869124393600, 63916431989200256,
    64804841680675200, 49327699395058688, 64449729487990912, 65030344643851776, 68310561489710336, 64317998547641344,
    71351883668034048, 115483188032341248, 65787289680918528, 66802654309459712, 65196370900147968, 64380636350588544,
    149069694847112576, 69838302833692160, 63988351216124288, 66584332530000512, 63958561324922240, 69917635172718720,
    66556535504958848, 56156736051362688, 51674920499533184, 65010549138050944, 64924413571101952, 66501181966524800,
    169410934841320832, 70475641622392576, 66754241438299520, 65199978672758272, 66939852745876736, 65750627840192256,
    69834866859848192, 64960628735279232, 54646762989063296, 64899017426872960, 65242069352190976, 66655560269868544,
    53914282087671552, 70024154658949120, 66816295125702144, 64450283540250240, 50870902621391360, 66566946505629440,
    65086591535491584, 65063707949772544, 64936508198907904, 66612473157921024, 65222518661019520, 65284469269256704,
    65309100904545280, 63730309581781376, 51742471745296768, 64971933089093760, 64959662365552384, 66800592725150848,
    64172038380708224, 65089473457126784, 50976077779666688, 51694746068624128, 120001145732321536, 53783852522073856,
    68310359628169472, 64913452814489216, 108806541109429376, 71021102467173632, 63534390354375040, 51452750431129600,
    51212026103928832, 46843632046026240, 68620868583787904, 50593997490302208, 71042439864623104, 69964879813013248,
    65163797868281088, 64990586130069504, 63289920815872256, 66581961710329984, 50702299385351040, 121863516567324800,
    52798204769096960, 43733079289895424, 46517523769932288, 65471729844532864, 50905056201179520, 63774186970007040,
    63430967542044800, 52035246778411392, 49809495943068288, 65482175204949248, 71357930982539136, 70941383577307392,
    65232105028172160, 69027275567598720, 111254638110005632, 44582692542297856, 120430749837239936, 49662092665424896,
    68212365653772928, 41437780049517440, 62487964523134848, 119176722465802752, 149937587478307968, 69876712724339456,
    65107860213588096, 53678127605332992, 111253916555499776, 44442917126833280, 66802276352348416, 63547270960574336,
    62076437937491072, 69890598355357312, 66161845189165952, 64933759417769984, 64438841747360768, 165999459496476544,
    63678907415301120, 69988489250631680, 71422522993688448, 63052048347383168, 40043221348853760, 42437098680158080,
    61520085052632576, 65129506848731136, 51861425158394624, 64989490915460608, 63737078452247168, 42495613314612352,
    167192841928924288, 65013474012743936, 149442498008026112, 67927931443349120, 70124931771547136, 71742485175113216,
    47137991925643008, 66657415695597056, 65371708645399296, 42360437807426048, 65248151025861120, 165859542343614848,
    71691357884397696, 66771146429454592, 65800930496992512, 64928605459180416, 45421997872331392, 64743646986745600,
    144510157565417344, 117826350389021952, 66798526845337344, 42523066745609472, 149860411210071296, 52467801524280320,
    59633666695752960, 40324284008780416, 42266743097825280, 67122126859367808, 52762921613766144, 51717114258149120,
    40163308632345728, 48935865234426496, 65319619282119808, 43335880716390784, 43335537119008896
]
                    # selected_objects = [2007911710694905728,2162765176002359168,2171423009746515840,2202700782658624000]
# selected_objects = [3017250126427057024,3018575033640452736,3121604220965378944,3208961454882028416,3210151053446429056,3210775438611713024,4496352578733523584,4508720160407113984,4518269899935842176,4577886588615102592]
# selected_objects = [5970493171281327872,5970751453436281856,5971299220726443136,5974526190511181162241459989970403968,6020604685025643648,6030906146908479360]
gaia_subset = gaia_data[np.in1d(gaia_data['source_id'], selected_objects)]

# gaia_data = gaia_data[gaia_data['parallax_error']/gaia_data['parallax'] < 0.2]
# gaia_data = gaia_data[np.logical_and(gaia_data['parallax'] > 0, 1e3/gaia_data['parallax'] < 2500)]
# gaia_subset = gaia_data[:250]
# gaia_subset = gaia_subset[np.int64(np.random.choice(np.arange(len(gaia_subset)), 250, replace=False))]

ts0 = 0. * un.Myr
ts1 = np.linspace(0., -40., 5e4) * un.Myr
ts2 = np.linspace(0., 40., 5e4) * un.Myr

orbit_sun = Orbit(vxvv=[0. * un.deg,
                        0. * un.deg,
                        0.00001 * un.pc,
                        0. * un.mas / un.yr,
                        0. * un.mas / un.yr,
                        0. * un.km / un.s],
                  radec=True,
                  ro=8.2, vo=238., zo=0.025,
                  solarmotion=[-11., 10., 7.25])

fig, ax = plt.subplots(2, 3)

print 'Computing orbits'
print gaia_subset['source_id','ra','dec','rv','pmra','pmdec']

for star_data in gaia_subset:
    # print star_data['source_id']

    # orbit = Orbit(vxvv=[np.float64(star_data['ra']) * un.deg,
    #                     np.float64(star_data['dec']) * un.deg,
    #                     1e3 / np.float64(star_data['parallax']) * un.pc,
    #                     # np.float64(star_data['r_est']) * un.pc,
    #                     np.float64(star_data['pmra']) * un.mas / un.yr,
    #                     np.float64(star_data['pmdec']) * un.mas / un.yr,
    #                     np.float64(star_data['rv']) * un.km / un.s],
    #               radec=True,
    #               ro=8.2, vo=238., zo=0.025,
    #               solarmotion=[-11., 10., 7.25])  # as used by JBH in his paper on forced oscillations and phase mixing
    # orbit.turn_physical_on()
    #
    # orbit.integrate(ts1, MWPotential2014)
    # orbit_ts0 = [orbit.x(ts0) * 1e3, orbit.y(ts0) * 1e3, orbit.z(ts0) * 1e3, orbit.R(ts0) * 1e3]
    # orbit_xyz1 = [orbit.x(ts1) * 1e3, orbit.y(ts1) * 1e3, orbit.z(ts1) * 1e3, orbit.R(ts1) * 1e3]
    #
    # orbit.integrate(ts2, MWPotential2014)
    # orbit_xyz2 = [orbit.x(ts2) * 1e3, orbit.y(ts, orbit_xyz2[1])),
    #              np.hstack((orbit_xyz1[2][:1:-1], orbit_xyz2[2])),
    #              np.hstack((orbit_xyz1[3][:1:-1], orbit_xyz2[3]))]
    #
    # ax[0, 0].plot(orbit_xyz[0], orbit_xyz[1], lw=0.8, c='C0')
    # ax[0, 0].scatter(orbit_ts0[0], orbit_ts0[1], lw=0, s=4, c='black')
    # ax[1, 0].plot(orbit_xyz[0], orbit_xyz[2], lw=0.8, c='C0')
    # ax[1, 0].scatter(orbit_ts0[0], orbit_ts0[2], lw=0, s=4, c='black')
    # ax[0, 1].plot(orbit_xyz[2], orbit_xyz[1], lw=0.8, c='C0')
    # ax[0, 1].scatter(orbit_ts0[2], orbit_ts0[1], lw=0, s=4, c='black')
    # ax[1, 1].plot(orbit_xyz[3], orbit_xyz[2], lw=0.8, c='C0')
    # ax[1, 1].scatter(orbit_ts0[3], orbit_ts0[2], lw=0, s=4, c='black')2) * 1e3, orbit.z(ts2) * 1e3, orbit.R(ts2) * 1e3]
    #
    # orbit_xyz = [np.hstack((orbit_xyz1[0][:1:-1], orbit_xyz2[0])),
    #              np.hstack((orbit_xyz1[1][:1:-1], orbit_xyz2[1])),
    #              np.hstack((orbit_xyz1[2][:1:-1], orbit_xyz2[2])),
    #              np.hstack((orbit_xyz1[3][:1:-1], orbit_xyz2[3]))]
    #
    # ax[0, 0].plot(orbit_xyz[0], orbit_xyz[1], lw=0.8, c='C0')
    # ax[0, 0].scatter(orbit_ts0[0], orbit_ts0[1], lw=0, s=4, c='black')
    # ax[1, 0].plot(orbit_xyz[0], orbit_xyz[2], lw=0.8, c='C0')
    # ax[1, 0].scatter(orbit_ts0[0], orbit_ts0[2], lw=0, s=4, c='black')
    # ax[0, 1].plot(orbit_xyz[2], orbit_xyz[1], lw=0.8, c='C0')
    # ax[0, 1].scatter(orbit_ts0[2], orbit_ts0[1], lw=0, s=4, c='black')
    # ax[1, 1].plot(orbit_xyz[3], orbit_xyz[2], lw=0.8, c='C0')
    # ax[1, 1].scatter(orbit_ts0[3], orbit_ts0[2], lw=0, s=4, c='black')


    orbit = Orbit(vxvv=[np.float64(star_data['ra']) * un.deg,
                        np.float64(star_data['dec']) * un.deg,
                        # 1e3 / np.float64(star_data['parallax']) * un.pc,
                        np.float64(star_data['r_est']) * un.pc,
                        np.float64(star_data['pmra']) * un.mas / un.yr,
                        np.float64(star_data['pmdec']) * un.mas / un.yr,
                        np.float64(star_data['rv']) * un.km / un.s],
                  radec=True,
                  ro=8.2, vo=238., zo=0.025,
                  solarmotion=[-11., 10., 7.25])  # as used by JBH in his paper on forced oscillations and phase mixing
    orbit.turn_physical_on()

    orbit.integrate(ts1, MWPotential2014)
    orbit_ts0 = [orbit.x(ts0) * 1e3, orbit.y(ts0) * 1e3, orbit.z(ts0) * 1e3, orbit.R(ts0) * 1e3]
    orbit_xyz1 = [orbit.x(ts1) * 1e3, orbit.y(ts1) * 1e3, orbit.z(ts1) * 1e3, orbit.R(ts1) * 1e3]

    orbit.integrate(ts2, MWPotential2014)
    orbit_xyz2 = [orbit.x(ts2) * 1e3, orbit.y(ts2) * 1e3, orbit.z(ts2) * 1e3, orbit.R(ts2) * 1e3]

    orbit_xyz = [np.hstack((orbit_xyz1[0][:1:-1], orbit_xyz2[0])),
                 np.hstack((orbit_xyz1[1][:1:-1], orbit_xyz2[1])),
                 np.hstack((orbit_xyz1[2][:1:-1], orbit_xyz2[2])),
                 np.hstack((orbit_xyz1[3][:1:-1], orbit_xyz2[3]))]

    ax[0, 0].plot(orbit_xyz[0], orbit_xyz[1], lw=0.8, c='C3')
    ax[0, 0].scatter(orbit_ts0[0], orbit_ts0[1], lw=0, s=4, c='black')
    ax[1, 0].plot(orbit_xyz[0], orbit_xyz[2], lw=0.8, c='C3')
    ax[1, 0].scatter(orbit_ts0[0], orbit_ts0[2], lw=0, s=4, c='black')
    ax[0, 1].plot(orbit_xyz[2], orbit_xyz[1], lw=0.8, c='C3')
    ax[0, 1].scatter(orbit_ts0[2], orbit_ts0[1], lw=0, s=4, c='black')
    ax[1, 1].plot(orbit_xyz[3], orbit_xyz[2], lw=0.8, c='C3')
    ax[1, 1].scatter(orbit_ts0[3], orbit_ts0[2], lw=0, s=4, c='black')

    mean_ra = np.median(gaia_subset['ra'])
    mean_dec = np.median(gaia_subset['dec'])
    d_deg = 5.
    idx_plot = np.logical_and(np.abs(gaia_data['ra'] - mean_ra) < d_deg,
                              np.abs(gaia_data['dec'] - mean_dec) < d_deg)
    ax[0, 2].scatter(gaia_data['ra'][idx_plot], gaia_data['dec'][idx_plot], lw=0, s=4, c='black')
    ax[0, 2].scatter(gaia_subset['ra'], gaia_subset['dec'], lw=0, s=8, c='red')
    ax[0, 2].set(xlabel='ra', ylabel='dec', xlim=(mean_ra-d_deg, mean_ra+d_deg), ylim=(mean_dec-d_deg, mean_dec+d_deg))

ax[0, 0].set(xlabel='X', ylabel='Y')
ax[1, 0].set(xlabel='X', ylabel='Z')
ax[0, 1].set(xlabel='Z', ylabel='Y')
ax[1, 1].set(xlabel='R', ylabel='Z')
plt.show()
# plt.savefig('orbits_-10_10_comb.png', dpi=350)
plt.close()




